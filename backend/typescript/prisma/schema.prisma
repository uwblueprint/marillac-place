generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment this for neon db
  // directUrl = env("DIRECT_URL")
}

enum UserType {
  STAFF
  RESIDENT
}

model User {
  id       Int       @id @default(autoincrement())
  type     UserType
  staff    Staff?
  resident Resident?

  email             String  @unique
  phoneNumber       String?
  firstName         String
  lastName          String
  displayName       String?
  profilePictureURL String?
  isActive          Boolean @default(true)

  notifications     Notification[]
  notificationsSent NotificationSent[]
}

model Staff {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @id

  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  tasksAssigned    TaskAssigned[]
  warningsAssigned Warning[]
}

model Role {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  permissions Permission[]
  staff       Staff[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  title String @unique
  roles Role[]
}

model Resident {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @id

  credits Int @default(0)

  dateJoined DateTime  @default(now())
  dateLeft   DateTime?

  tasks    TaskAssigned[]
  warnings Warning[]
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BI_WEEKLY
}

model Task {
  id Int @id @default(autoincrement())

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  title               String
  description         String
  creditValue         Int
  comments            String?
  recurrenceFrequency RecurrenceFrequency?

  tasksAssigned   TaskAssigned[]
  relatedWarnings Warning[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]
}

enum Status {
  PENDING_APPROVAL
  ASSIGNED
  INCOMPLETE
  COMPLETE
  EXCUSED
}

model TaskAssigned {
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  assigner   Staff? @relation(fields: [assignerId], references: [userId], onDelete: SetNull)
  assignerId Int?

  assignee   Resident @relation(fields: [assigneeId], references: [userId], onDelete: Cascade)
  assigneeId Int

  status    Status
  startDate DateTime
  endDate   DateTime?

  @@id([taskId, assigneeId])
}

model Warning {
  id Int @id @default(autoincrement())

  assigner   Staff? @relation(fields: [assignerId], references: [userId], onDelete: SetNull)
  assignerId Int?

  resident   Resident @relation(fields: [residentId], references: [userId], onDelete: Cascade)
  residentId Int

  relatedTask   Task? @relation(fields: [relatedTaskId], references: [id], onDelete: SetNull)
  relatedTaskId Int?

  title       String
  description String
  dateIssued  DateTime @default(now())
}

model Notification {
  id Int @id @default(autoincrement())

  author   User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId Int?

  message   String
  createdAt DateTime @default(now())

  recipients NotificationSent[]
}

model NotificationSent {
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int

  recipient   User @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int

  seen Boolean @default(false)

  @@id([notificationId, recipientId])
}
