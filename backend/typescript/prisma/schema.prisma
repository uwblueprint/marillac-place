generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  title      String   @db.VarChar(255)
  content    String?
  published  Boolean  @default(false)
  author_id  Int
  author     user     @relation(fields: [author_id], references: [id])
}

model profile {
  id      Int     @id @default(autoincrement())
  bio     String?
  user_id Int     @unique
  user    user    @relation(fields: [user_id], references: [id])
}

model user {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   post[]
  profile profile?
}

model Task {
  id                   Int                  @id @default(autoincrement())
  category             Category?            @relation(fields: [category_id], references: [id])
  category_id          Int
  title                String
  status               Statuses
  description          String
  assignee             Resident?            @relation(fields: [assignee_id], references: [id])
  assignee_id          Int
  assigner             Staff?               @relation(fields: [assigner_id], references: [id])
  assigner_id          Int
  credit_value         Float
  start_date           DateTime
  end_date             DateTime?
  comments             String
  recurrence_frequency Recurrence_Frequency
  warnings             Warning[]

  @@map("task")
}

enum Recurrence_Frequency {
  DAILY
  WEEKLY
  BI_WEEKLY
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  task Task[]

  @@map("category")
}

enum Statuses {
  PENDING_APPROVAL
  INCOMPLETE
  COMPLETE
  EXCUSED
}

model Warning {
  id              Int      @id @default(autoincrement())
  resident        Resident @relation(fields: [resident_id], references: [id])
  resident_id     Int
  title           String
  description     String
  assigner        Staff    @relation(fields: [assigner_id], references: [id])
  assigner_id     Int
  date_issued     DateTime @default(now())
  related_task    Task?    @relation(fields: [related_task_id], references: [id])
  related_task_id Int?

  @@map("warning")
}

model Staff {
  id                   Int            @id @default(autoincrement())
  role_id              Int
  role                 Role           @relation(fields: [role_id], references: [id])
  first_name           String
  last_name            String
  email                String         @unique
  phone_number         String?
  display_name         String
  profile_picture_link String?
  tasks_assigned       Task[]
  warnings_assigned    Warning[]
  notifications        Notification[]

  @@map("staff")
}

model Role {
  id    Int     @id @default(autoincrement())
  title String  @unique
  staff Staff[]

  @@map("role")
}

model Resident {
  id                   Int                 @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String              @unique
  phone_number         String?
  display_name         String
  profile_picture_link String?
  birthdate            DateTime?
  credits              Float
  date_joined          DateTime
  date_left            DateTime?
  tasks                Task[]
  warnings             Warning[]
  notifications        notification_user[]

  @@map("resident")
}

model Notification {
  id         Int                 @id @default(autoincrement())
  message    String
  author_id  Int
  author     Staff               @relation(fields: [author_id], references: [id])
  created_at DateTime            @default(now())
  residents  notification_user[]

  @@map("notification")
}

model notification_user {
  id              Int          @id @default(autoincrement())
  notification    Notification @relation(fields: [notification_id], references: [id])
  notification_id Int
  recipient       Resident     @relation(fields: [recipient_id], references: [id])
  recipient_id    Int
  seen            Boolean      @default(false)
}
