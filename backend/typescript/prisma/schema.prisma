generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment this for neon db
  // directUrl = env("DIRECT_URL")
}

model post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  title      String   @db.VarChar(255)
  content    String?
  published  Boolean  @default(false)
  author_id  Int
  author     user     @relation(fields: [author_id], references: [id])
}

model profile {
  id      Int     @id @default(autoincrement())
  bio     String?
  user_id Int     @unique
  user    user    @relation(fields: [user_id], references: [id])
}

model user {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   post[]
  profile profile?
}

// STUB IMPLEMENTATION FOR REFACTORING CHANGES ()
model UserStub {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  notificationsSent     Notification[]
  notificationsReceived NotificationReceived[]
}

model task {
  id                  Int                   @id @default(autoincrement())
  category            category              @relation(fields: [categoryId], references: [id])
  categoryId          Int                   @map("category_id")
  title               String
  status              Status
  description         String
  assignee            resident              @relation(fields: [assigneeId], references: [id])
  assigneeId          Int                   @map("assignee_id")
  assigner            staff                 @relation(fields: [assignerId], references: [id])
  assignerId          Int                   @map("assigner_id")
  creditValue         Float                 @map("credit_value")
  startDate           DateTime              @map("start_date")
  endDate             DateTime?             @map("end_date")
  comments            String?
  recurrenceFrequency Recurrence_Frequency? @map("recurrence_frequency")
  warnings            warning[]
}

//TODO: figure out why this won't work if it's RecurrenceFrequency
enum Recurrence_Frequency {
  DAILY
  WEEKLY
  BI_WEEKLY
  //@@map("recurrence_frequency")
}

model category {
  id   Int    @id @default(autoincrement())
  name String
  task task[]

  @@map("category")
}

enum Status {
  PENDING_APPROVAL
  INCOMPLETE
  COMPLETE
  EXCUSED
}

model warning {
  id            Int      @id @default(autoincrement())
  resident      resident @relation(fields: [residentId], references: [id])
  residentId    Int      @map("resident_id")
  title         String
  description   String
  assigner      staff    @relation(fields: [assignerId], references: [id])
  assignerId    Int      @map("assigner_id")
  dateIssued    DateTime @default(now()) @map("date_issued")
  related_task  task?    @relation(fields: [relatedTaskId], references: [id])
  relatedTaskId Int?     @map("related_task_id")
}

model staff {
  id                 Int            @id @default(autoincrement())
  roleId             Int            @map("role_id")
  role               role           @relation(fields: [roleId], references: [id])
  firstName          String         @map("first_name")
  lastName           String         @map("last_name")
  email              String         @unique
  phoneNumber        String?        @map("phone_number")
  displayName        String?        @map("display_name")
  profilePictureLink String?        @map("profile_picture_link")
  tasksAssigned      task[]
  warningsAssigned   warning[]
}

model role {
  id    Int     @id @default(autoincrement())
  title String  @unique
  staff staff[]

  @@map("role")
}

model resident {
  id                 Int                    @id @default(autoincrement())
  firstName          String                 @map("first_name")
  lastName           String                 @map("last_name")
  email              String                 @unique
  phoneNumber        String?                @map("phone_number")
  displayName        String                 @map("display_name")
  profilePictureLink String?                @map("profile_picture_link")
  birthdate          DateTime?
  credits            Float
  dateJoined         DateTime               @map("date_joined")
  dateLeft           DateTime?              @map("date_left")
  tasks              task[]
  warnings           warning[]
}

model Notification {
  id         Int                    @id @default(autoincrement())
  author     UserStub?                  @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId   Int?                   @map("author_id")
  title      String
  message    String
  createdAt  DateTime               @default(now()) @map("created_at")
  recipients NotificationReceived[]
  @@map("notifications")
}

model NotificationReceived {
  id             Int          @id @default(autoincrement())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notificationId Int          @map("notification_id")
  recipient      UserStub         @relation(fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipientId    Int          @map("recipient_id")
  seen           Boolean      @default(false)
  @@map("notifications_received")
}