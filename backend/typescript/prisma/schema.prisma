generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post {
  id        Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author_id  Int
  author    user     @relation(fields: [author_id], references: [id])
}

model profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user_id Int     @unique
  user   user    @relation(fields: [user_id], references: [id])
}

model user {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   post[]
  profile profile?
}

model task {
  id                   Int                  @id @default(autoincrement())
  category             category             @relation(fields: [category_id], references: [id])
  category_id          Int
  title                String
  status               Statuses
  description          String
  assignee             resident             @relation(fields: [assignee_id], references: [id])
  assignee_id          Int
  assigner             staff                @relation(fields: [assigner_id], references: [id])
  assigner_id          Int
  credit_value         Float
  start_date           DateTime
  end_date             DateTime?
  comments             String
  recurrence_frequency Recurrence_Frequency
  warnings             warning[]
}

enum Recurrence_Frequency {
  DAILY
  WEEKLY
  BI_WEEKLY
}

model category {
  id   Int    @id @default(autoincrement())
  name String
  task task[]
}

enum Statuses {
  PENDING_APPROVAL
  INCOMPLETE
  COMPLETE
  EXCUSED
}

model warning {
  id              Int      @id @default(autoincrement())
  resident        resident @relation(fields: [resident_id], references: [id])
  resident_id     Int
  title           String
  description     String
  assigner        staff    @relation(fields: [assigner_id], references: [id])
  assigner_id     Int
  date_issued     DateTime @default(now())
  related_task    task?    @relation(fields: [related_task_id], references: [id])
  related_task_id Int?
}

model staff {
  id                   Int       @id @default(autoincrement())
  roleId               Int
  role                 role      @relation(fields: [roleId], references: [id])
  first_name           String
  last_name            String
  email                String    @unique
  phone_number         String?
  display_name         String
  profile_picture_link String?
  tasks_assigned       task[]
  warnings_assigned    warning[]
}

model role {
  id    Int     @id @default(autoincrement())
  title String  @unique
  staff staff[]
}

model resident {
  id                   Int       @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String    @unique
  phone_number         String?
  display_name         String
  profile_picture_link String?
  birthdate            DateTime?
  credits              Float
  date_joined          DateTime
  date_left            DateTime?
  tasks                task[]
  warnings             warning[]
}

model Task {
  id                   Int                  @id @default(autoincrement())
  category             Category             @relation(fields: [category_id], references: [id])
  category_id          Int
  title                String
  status               Statuses
  description          String
  assignee             Resident             @relation(fields: [assignee_id], references: [id])
  assignee_id          Int
  assigner             Staff                @relation(fields: [assigner_id], references: [id])
  assigner_id          Int
  credit_value         Float
  start_date           DateTime
  end_date             DateTime?
  comments             String
  recurrence_frequency Recurrence_Frequency
  warnings             Warning[]
}