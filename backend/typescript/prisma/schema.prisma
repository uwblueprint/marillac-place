generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment this for neon db
  // directUrl = env("DIRECT_URL")
}

enum UserType {
  STAFF
  RESIDENT
}

model User {
  id                Int                @id @default(autoincrement())
  type              UserType
  staff             Staff?
  resident          Resident?
  residentId        Int?               @unique @map("resident_id")
  authId            String             @unique @map("auth_id")
  email             String             @unique
  phoneNumber       String?            @map("phone_number")
  firstName         String             @map("first_name")
  lastName          String             @map("last_name")
  displayName       String?            @map("display_name")
  profilePictureURL String?            @map("profile_picture_url")
  isActive          Boolean            @default(true) @map("is_active")
  // notifications     Notification[]
  // notificationsSent NotificationSent[]
  @@map("users")
}
model Staff {
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int            @id @map("user_id")
  isAdmin          Boolean        @default(false) @map("is_admin")
  // tasksAssigned    TaskAssigned[]
  // warningsAssigned Warning[]
  @@map("staff")
}

model Resident {
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int            @id @map("user_id")
  residentId Int            @unique @map("resident_id") // Differs from user id, this id is assigned by the staff
  birthDate  DateTime       @map("birth_date")
  roomNumber Int            @map("room_number")
  credits    Int            @default(0)
  dateJoined DateTime       @default(now()) @map("date_joined")
  dateLeft   DateTime?      @map("date_left")
  notes      String?
  // tasks      TaskAssigned[]
  // warnings   Warning[]
  @@map("residents")
}

model task {
  id                  Int                   @id @default(autoincrement())
  category            category              @relation(fields: [categoryId], references: [id])
  categoryId          Int                   @map("category_id")
  title               String
  status              Status
  description         String
  // assignee            resident              @relation(fields: [assigneeId], references: [id])
  assigneeId          Int                   @map("assignee_id")
  // assigner            staff                 @relation(fields: [assignerId], references: [id])
  assignerId          Int                   @map("assigner_id")
  creditValue         Float                 @map("credit_value")
  startDate           DateTime              @map("start_date")
  endDate             DateTime?             @map("end_date")
  comments            String?
  recurrenceFrequency Recurrence_Frequency? @map("recurrence_frequency")
  warnings            warning[]
}

//TODO: figure out why this won't work if it's RecurrenceFrequency
enum Recurrence_Frequency {
  DAILY
  WEEKLY
  BI_WEEKLY
  //@@map("recurrence_frequency")
}

model category {
  id   Int    @id @default(autoincrement())
  name String
  task task[]

  @@map("category")
}

enum Status {
  PENDING_APPROVAL
  INCOMPLETE
  COMPLETE
  EXCUSED
}

model warning {
  id            Int      @id @default(autoincrement())
  // resident      resident @relation(fields: [residentId], references: [id])
  residentId    Int      @map("resident_id")
  title         String
  description   String
  // assigner      staff    @relation(fields: [assignerId], references: [id])
  assignerId    Int      @map("assigner_id")
  dateIssued    DateTime @default(now()) @map("date_issued")
  related_task  task?    @relation(fields: [relatedTaskId], references: [id])
  relatedTaskId Int?     @map("related_task_id")
}

model notification {
  id        Int                    @id @default(autoincrement())
  message   String
  authorId  Int                    @map("author_id")
  // author    staff                  @relation(fields: [authorId], references: [id])
  createdAt DateTime               @default(now()) @map("created_at")
  residents notificationResident[]
}

model notificationResident {
  notification   notification @relation(fields: [notificationId], references: [id])
  notificationId Int          @map("notification_id")
  // resident       resident     @relation(fields: [residentId], references: [id])
  residentId     Int          @map("resident_id")
  seen           Boolean      @default(false)

  @@id([notificationId, residentId])
}
